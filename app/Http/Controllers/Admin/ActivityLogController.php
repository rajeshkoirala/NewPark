<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Auth;
use App\Repositories\ActivityLogRepository;
use DB;
use App\ActivityLog;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Validator;
use App\Http\Controllers\Controller;
use PHPExcel;
use PHPExcel_IOFactory;
use PHPExcel_Style_Fill;

class ActivityLogController extends Controller
{
    private $activitylogRepository;

    /**
     * ActivityLogRepository constructor.
     */
    public function __construct()
    {
        $this->activitylogRepository = new ActivityLogRepository();
    }
    public function index()
    {
        $userName = $this->activitylogRepository->getUserName();
        return view('admin.activity-log.index',compact('userName'));
    }
    public function listAll(Request $request)
    {
        $offset = $request->get('offset');
        $limit = $request->get('limit');
        $filter= $request->get('filter');

        echo json_encode($this->activitylogRepository->findAll($offset, $limit, $filter));
    }
    public function form($id = "")
    {
        $request = request();
        if ($request->get('id')) {

            $id = $request->get('id');
        }
        $activitylog = ActivityLog::findOrNew($id);
        return view('admin.activity-log.form', compact('activitylog'));
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */

    public function saveOrUpdate(Request $request)
    {

        $rules = array(
            'category_name' => 'required',
            'category_short_desc' => 'required',
            'category_desc' => 'required',
            'category_type_id' => 'required',

        );
        $input = Input::all();
        $validation = Validator::make($input, $rules);

        $validator = $validation;

        if ($validation->fails()){

            return redirect ('admin/categories')->withErrors($validator);
        }

        if ($request->get('id') > 0) {

            $category = Categories::findOrFail($request->get('id'));
            $input = $request->all();

            $category->fill($input)->save();
            $message = "Category Successfully Updated";

        } else {

            $input = $request->all();
            Categories::create($input);
            $message = "Category Successfully Created";
        }

        Session::flash('flash_message', $message);

        return redirect('admin/categories');
    }


    public function delete(Request $request)
    {

        $id=$request->get('id');
        DB::table('categories')->where('id', '=', $id)->delete();
        Session::flash('flash_message', "Category successfully deleted");
        return redirect('admin/categories');
    }

    public function exportToExcel(Request $request)
    {
        $offset = 0;
        $limit = 10000;
        $filter["action"] = $request->get('action');
        $filter["start_date"] = $request->get('start_date');
        $filter["end_date"] = $request->get('end_date');
        //$filter["search_text"] = $request->get('tsearch');
        $filter["user_id"] = $request->get('user_id');
        $data = $this->activitylogRepository->findall($offset, $limit, $filter);

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("Sharad Khatiwada")
            ->setLastModifiedBy("olive report")
            ->setTitle("Office 2007 XLSX")
            ->setSubject("Office 2007 XLSX")
            ->setDescription("Olivereport for Office 2007 XLSX, generated by PHPExcel.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("Olive Report");
        $objPHPExcel->getActiveSheet()->setTitle('Olive Report');

        $i = 3;

        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('B')->setWidth(5);
        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('C')->setWidth(20);
        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('F')->setWidth(20);
        //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('G')->setWidth(20);
        //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('H')->setWidth(20);
        // $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('I')->setWidth(30);

        $objPHPExcel->getActiveSheet()->mergeCells("B$i:D$i");
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('B' . $i, 'Olive Report');
        $objPHPExcel->setActiveSheetIndex(0)->getStyle("B$i:B$i")->getFont()->setSize(16);

        $i++;

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('B' . $i, 'Action')
            ->setCellValue('C' . $i, $request->get('action'));

        $i++;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('B' . $i, 'From')
            ->setCellValue('C' . $i, $request->get('start_date'));

        $i++;

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('B' . $i, 'To')
            ->setCellValue('C' . $i, $request->get('end_date'));

        $i = $i + 2;

        $header = "B$i:I$i";
        $objPHPExcel
            ->setActiveSheetIndex(0)
            ->getStyle($header)
            ->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
            ->getStartColor()
            ->setARGB('00CCFFCC');

        $objPHPExcel->setActiveSheetIndex(0)->getStyle("B$i:I$i")->getFont()->setSize(14);
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('B' . $i, 'SNo')
            ->setCellValue('C' . $i, 'Action')
            ->setCellValue('D' . $i, 'Committed by')
            ->setCellValue('E' . $i, 'Created at')
            ->setCellValue('F' . $i, 'IP Address');
         //   ->setCellValue('G' . $i, 'Assigned Date')
         //   ->setCellValue('H' . $i, 'Status');
        //  ->setCellValue('I' . $i, 'Billing Address Details');

        $i++;
        $sno = 1;

        foreach ($data["data"] as $row) {

            $objPHPExcel->setActiveSheetIndex(0)->getStyle("I$i")->getAlignment()->setWrapText(true);

            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('B' . $i, $sno++)
                ->setCellValue('C' . $i, $row->description)
                ->setCellValue('D' . $i, $row->full_name)
                ->setCellValue('E' . $i, $row->updated_at)
                ->setCellValue('F' . $i, $row->ip_address);
             //   ->setCellValue('G' . $i, $row->date)
             //   ->setCellValue('H' . $i, $row->stat);
            //   ->setCellValue('I' . $i, $row->billing_details);

            $i++;
        }

        $filename = "olive_report_log" . "_" . date('YmdHis') . ".xlsx";

        $writer = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $writer->save($filename);

        ob_start();
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header("Content-Disposition: attachment;filename=\"$filename\"");
        header("Pragma: public");
        header("Cache-Control: must-revalidate),post-check=0),pre-check=0");
        header('Content-Length: ' . filesize($filename));
        ob_clean();
        flush();
        if (readfile($filename)) {
            unlink($filename);
        }
    }

}
